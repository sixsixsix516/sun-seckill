---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by SUN.
--- DateTime: 2022/5/3 16:30
---

---
--- 申请令牌
---
--- @param key '限流关键字'
--- @param apply '申请令牌数量'
---
local function acquire(key, apply)
    local times = redis.call('TIME');
    -- 获取当前事件秒数 times[1] 秒数 times[2]微秒数
    local currentMillSecond = times[1] * 1000000 + times[2];

    -- 获取给定字段的值
    local cacheInfo = redis.pcall("HMGET", key, "last_mill_second", "current_permits", "max_permits", "rate");

    -- 上次申请的时间
    local lastMillSecond = cacheInfo[1];
    -- 之前的令牌数
    local currentPermits = tonumber(cacheInfo[2]);
    -- 桶的容量
    local maxPermits = tonumber(cacheInfo[3]);
    -- 令牌发放速率
    local rate = tonumber(cacheInfo[4]);

    -- 本次令牌数
    local localCurrentPermits = 0;

    -- 时间段内的发放的令牌数
    local reversePermits = math.floor(((currentMillSecond - lastMillSecond) / 1000) * rate);

    -- 令牌总数
    local expectCurrentPermits = reversePermits + currentPermits;

    -- 可以申请的令牌总数
    localCurrentPermits = math.min(expectCurrentPermits, maxPermits);

    -- 第一次获取令牌
    -- redis.pcall("HSET", key, "last_mill_second", currentMillSecond);
    -- localCurrentPermits = maxPermits;

    local result = -1;

    -- 有足够的令牌申请
    if localCurrentPermits - apply >= 0 then
        -- 保存剩余的令牌
        redis.pcall("HSET", key, "current_permits", localCurrentPermits - apply);
        -- 为下次的令牌获取，保存时间
        redis.pcall("HSET", key, "last_mill_second", currentMillSecond);
        -- 返回令牌获取成功
        result = 1;
    else
        -- 返回令牌获取失败
        result = -1;
    end

    return result;

end

---
--- 初始化限流key
---
--- @param key '限流关键字'
--- @param maxPermits '桶的容量'
--- @param rate '令牌发放速率'
---
local function init(key, maxPermits, rate)
    redis.pcall("HMSET", key, "max_permits", maxPermits, "rate", rate, "current_permits", maxPermits);
end

---
--- 删除限流key
--- @param key '限流关键字'
---
local function delete(key)
    redis.pcall("DEL", key)
end

local key = KEYS[1]
local method = ARGV[1]

if method == 'acquire' then
    return acquire(key, ARGV[2]);

elseif method == 'init' then
    return init(key, ARGV[2], ARGV[3]);

elseif method == 'delete' then
    return delete(key)
end